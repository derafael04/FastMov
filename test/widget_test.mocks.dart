// Mocks generated by Mockito 5.4.6 from annotations
// in fastmov/test/widget_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i11;

import 'package:fastmov/domain/entities/user.dart' as _i10;
import 'package:fastmov/domain/usecases/auth/login_usecase.dart' as _i2;
import 'package:fastmov/domain/usecases/auth/register_usecase.dart' as _i3;
import 'package:fastmov/domain/usecases/auth/validate_pin_usecase.dart' as _i4;
import 'package:fastmov/domain/usecases/theme/get_theme_usecase.dart' as _i6;
import 'package:fastmov/domain/usecases/theme/set_theme_usecase.dart' as _i7;
import 'package:fastmov/presentation/stores/auth/auth_store.dart' as _i8;
import 'package:fastmov/presentation/stores/theme/theme_store.dart' as _i12;
import 'package:flutter/material.dart' as _i13;
import 'package:mobx/mobx.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLoginUseCase_0 extends _i1.SmartFake implements _i2.LoginUseCase {
  _FakeLoginUseCase_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRegisterUseCase_1 extends _i1.SmartFake
    implements _i3.RegisterUseCase {
  _FakeRegisterUseCase_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeValidatePinUseCase_2 extends _i1.SmartFake
    implements _i4.ValidatePinUseCase {
  _FakeValidatePinUseCase_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeReactiveContext_3 extends _i1.SmartFake
    implements _i5.ReactiveContext {
  _FakeReactiveContext_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetThemeUseCase_4 extends _i1.SmartFake
    implements _i6.GetThemeUseCase {
  _FakeGetThemeUseCase_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSetThemeUseCase_5 extends _i1.SmartFake
    implements _i7.SetThemeUseCase {
  _FakeSetThemeUseCase_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AuthStore].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthStore extends _i1.Mock implements _i8.AuthStore {
  MockAuthStore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.LoginUseCase get loginUseCase => (super.noSuchMethod(
        Invocation.getter(#loginUseCase),
        returnValue: _FakeLoginUseCase_0(
          this,
          Invocation.getter(#loginUseCase),
        ),
      ) as _i2.LoginUseCase);

  @override
  _i3.RegisterUseCase get registerUseCase => (super.noSuchMethod(
        Invocation.getter(#registerUseCase),
        returnValue: _FakeRegisterUseCase_1(
          this,
          Invocation.getter(#registerUseCase),
        ),
      ) as _i3.RegisterUseCase);

  @override
  _i4.ValidatePinUseCase get validatePinUseCase => (super.noSuchMethod(
        Invocation.getter(#validatePinUseCase),
        returnValue: _FakeValidatePinUseCase_2(
          this,
          Invocation.getter(#validatePinUseCase),
        ),
      ) as _i4.ValidatePinUseCase);

  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
      ) as bool);

  @override
  bool get isLoggedIn => (super.noSuchMethod(
        Invocation.getter(#isLoggedIn),
        returnValue: false,
      ) as bool);

  @override
  String get email => (super.noSuchMethod(
        Invocation.getter(#email),
        returnValue: _i9.dummyValue<String>(
          this,
          Invocation.getter(#email),
        ),
      ) as String);

  @override
  String get password => (super.noSuchMethod(
        Invocation.getter(#password),
        returnValue: _i9.dummyValue<String>(
          this,
          Invocation.getter(#password),
        ),
      ) as String);

  @override
  String get registerName => (super.noSuchMethod(
        Invocation.getter(#registerName),
        returnValue: _i9.dummyValue<String>(
          this,
          Invocation.getter(#registerName),
        ),
      ) as String);

  @override
  String get registerEmail => (super.noSuchMethod(
        Invocation.getter(#registerEmail),
        returnValue: _i9.dummyValue<String>(
          this,
          Invocation.getter(#registerEmail),
        ),
      ) as String);

  @override
  String get registerPassword => (super.noSuchMethod(
        Invocation.getter(#registerPassword),
        returnValue: _i9.dummyValue<String>(
          this,
          Invocation.getter(#registerPassword),
        ),
      ) as String);

  @override
  String get registerPhone => (super.noSuchMethod(
        Invocation.getter(#registerPhone),
        returnValue: _i9.dummyValue<String>(
          this,
          Invocation.getter(#registerPhone),
        ),
      ) as String);

  @override
  String get pin => (super.noSuchMethod(
        Invocation.getter(#pin),
        returnValue: _i9.dummyValue<String>(
          this,
          Invocation.getter(#pin),
        ),
      ) as String);

  @override
  bool get isPinValid => (super.noSuchMethod(
        Invocation.getter(#isPinValid),
        returnValue: false,
      ) as bool);

  @override
  bool get canLogin => (super.noSuchMethod(
        Invocation.getter(#canLogin),
        returnValue: false,
      ) as bool);

  @override
  bool get canRegister => (super.noSuchMethod(
        Invocation.getter(#canRegister),
        returnValue: false,
      ) as bool);

  @override
  bool get canValidatePin => (super.noSuchMethod(
        Invocation.getter(#canValidatePin),
        returnValue: false,
      ) as bool);

  @override
  bool get hasLoginErrors => (super.noSuchMethod(
        Invocation.getter(#hasLoginErrors),
        returnValue: false,
      ) as bool);

  @override
  bool get hasRegisterErrors => (super.noSuchMethod(
        Invocation.getter(#hasRegisterErrors),
        returnValue: false,
      ) as bool);

  @override
  set isLoading(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #isLoading,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set errorMessage(String? value) => super.noSuchMethod(
        Invocation.setter(
          #errorMessage,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set currentUser(_i10.User? value) => super.noSuchMethod(
        Invocation.setter(
          #currentUser,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set isLoggedIn(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #isLoggedIn,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set email(String? value) => super.noSuchMethod(
        Invocation.setter(
          #email,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set password(String? value) => super.noSuchMethod(
        Invocation.setter(
          #password,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set emailError(String? value) => super.noSuchMethod(
        Invocation.setter(
          #emailError,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set passwordError(String? value) => super.noSuchMethod(
        Invocation.setter(
          #passwordError,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set registerName(String? value) => super.noSuchMethod(
        Invocation.setter(
          #registerName,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set registerEmail(String? value) => super.noSuchMethod(
        Invocation.setter(
          #registerEmail,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set registerPassword(String? value) => super.noSuchMethod(
        Invocation.setter(
          #registerPassword,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set registerPhone(String? value) => super.noSuchMethod(
        Invocation.setter(
          #registerPhone,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set registerNameError(String? value) => super.noSuchMethod(
        Invocation.setter(
          #registerNameError,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set registerEmailError(String? value) => super.noSuchMethod(
        Invocation.setter(
          #registerEmailError,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set registerPasswordError(String? value) => super.noSuchMethod(
        Invocation.setter(
          #registerPasswordError,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set registerPhoneError(String? value) => super.noSuchMethod(
        Invocation.setter(
          #registerPhoneError,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set pin(String? value) => super.noSuchMethod(
        Invocation.setter(
          #pin,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set pinError(String? value) => super.noSuchMethod(
        Invocation.setter(
          #pinError,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set isPinValid(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #isPinValid,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.ReactiveContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeReactiveContext_3(
          this,
          Invocation.getter(#context),
        ),
      ) as _i5.ReactiveContext);

  @override
  void setEmail(String? value) => super.noSuchMethod(
        Invocation.method(
          #setEmail,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setPassword(String? value) => super.noSuchMethod(
        Invocation.method(
          #setPassword,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setRegisterName(String? value) => super.noSuchMethod(
        Invocation.method(
          #setRegisterName,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setRegisterEmail(String? value) => super.noSuchMethod(
        Invocation.method(
          #setRegisterEmail,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setRegisterPassword(String? value) => super.noSuchMethod(
        Invocation.method(
          #setRegisterPassword,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setRegisterPhone(String? value) => super.noSuchMethod(
        Invocation.method(
          #setRegisterPhone,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setPin(String? value) => super.noSuchMethod(
        Invocation.method(
          #setPin,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clearErrors() => super.noSuchMethod(
        Invocation.method(
          #clearErrors,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clearForm() => super.noSuchMethod(
        Invocation.method(
          #clearForm,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clearRegisterForm() => super.noSuchMethod(
        Invocation.method(
          #clearRegisterForm,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i11.Future<bool> login() => (super.noSuchMethod(
        Invocation.method(
          #login,
          [],
        ),
        returnValue: _i11.Future<bool>.value(false),
      ) as _i11.Future<bool>);

  @override
  _i11.Future<bool> register() => (super.noSuchMethod(
        Invocation.method(
          #register,
          [],
        ),
        returnValue: _i11.Future<bool>.value(false),
      ) as _i11.Future<bool>);

  @override
  _i11.Future<bool> validatePin(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #validatePin,
          [userId],
        ),
        returnValue: _i11.Future<bool>.value(false),
      ) as _i11.Future<bool>);

  @override
  void logout() => super.noSuchMethod(
        Invocation.method(
          #logout,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ThemeStore].
///
/// See the documentation for Mockito's code generation for more information.
class MockThemeStore extends _i1.Mock implements _i12.ThemeStore {
  MockThemeStore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.GetThemeUseCase get getThemeUseCase => (super.noSuchMethod(
        Invocation.getter(#getThemeUseCase),
        returnValue: _FakeGetThemeUseCase_4(
          this,
          Invocation.getter(#getThemeUseCase),
        ),
      ) as _i6.GetThemeUseCase);

  @override
  _i7.SetThemeUseCase get setThemeUseCase => (super.noSuchMethod(
        Invocation.getter(#setThemeUseCase),
        returnValue: _FakeSetThemeUseCase_5(
          this,
          Invocation.getter(#setThemeUseCase),
        ),
      ) as _i7.SetThemeUseCase);

  @override
  _i13.ThemeMode get themeMode => (super.noSuchMethod(
        Invocation.getter(#themeMode),
        returnValue: _i13.ThemeMode.system,
      ) as _i13.ThemeMode);

  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
      ) as bool);

  @override
  bool get isDarkMode => (super.noSuchMethod(
        Invocation.getter(#isDarkMode),
        returnValue: false,
      ) as bool);

  @override
  bool get isLightMode => (super.noSuchMethod(
        Invocation.getter(#isLightMode),
        returnValue: false,
      ) as bool);

  @override
  bool get isSystemMode => (super.noSuchMethod(
        Invocation.getter(#isSystemMode),
        returnValue: false,
      ) as bool);

  @override
  set themeMode(_i13.ThemeMode? value) => super.noSuchMethod(
        Invocation.setter(
          #themeMode,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set isLoading(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #isLoading,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set errorMessage(String? value) => super.noSuchMethod(
        Invocation.setter(
          #errorMessage,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.ReactiveContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeReactiveContext_3(
          this,
          Invocation.getter(#context),
        ),
      ) as _i5.ReactiveContext);

  @override
  _i11.Future<bool> setTheme(_i13.ThemeMode? theme) => (super.noSuchMethod(
        Invocation.method(
          #setTheme,
          [theme],
        ),
        returnValue: _i11.Future<bool>.value(false),
      ) as _i11.Future<bool>);

  @override
  _i11.Future<void> toggleTheme() => (super.noSuchMethod(
        Invocation.method(
          #toggleTheme,
          [],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);
}
